package learn;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.EntityNotFoundException;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.KeyFactory.Builder;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.apphosting.api.DatastorePb.Query.Filter.Operator;

/**
 * Servlet implementation class AEDataStore
 */
@WebServlet("/AEDataStore")
public class AEDataStore extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException  {
		PrintWriter out = response.getWriter();
		
		DatastoreService ds = DatastoreServiceFactory.getDatastoreService();
		
		//Creating an Entity without identifier. When we create an entity without identifier, 
		//whenever the servlet was invoked duplicate values of the same entity will be created with different key values
		Entity abhiram = new Entity("Person"); //identifier was not provided here , identifier will be auto generated by app engine
		abhiram.setProperty("Name", "Abhiram");
		abhiram.setProperty("Age", 21);
		abhiram.setProperty("City","Chennai");
		
		ds.put(abhiram); //persisting or storing entity in data store
		
		//Creating entity with identifier. This makes entity unique
		Entity sharan = new Entity("Users","Ram");
		sharan.setProperty("Name", "Ram");
		sharan.setProperty("Age", 20);
		sharan.setProperty("City", "Chennai");
	
		ds.put(sharan); //persisting entity in data store
		
		
		//creating a key. Key is used to retrieve the entity from the data store
		Key key = KeyFactory.createKey("Users","Ram");
	
		try {
			
			Entity e = ds.get(key);
			out.println("Name : " + e.getProperty("Name")); //retrieving individual properties
			out.println("Age : " + e.getProperty("Age"));
			out.println("City : " + e.getProperty("City"));
			out.println("<br><br> Overall Details : " + e.getProperties().toString()); // retrieving all properties at once
		} catch (EntityNotFoundException e) {
			
			out.println("User details not present");
		}
		
		//creating a batch entity
		Entity apple = new Entity("Fruits","Apple");
		apple.setProperty("Color","Red");
		Entity mango = new Entity("Fruits","Mango");
		mango.setProperty("Color","Yellow");
		Entity banana = new Entity("Fruits","Banana");
		banana.setProperty("Color", "Green");
		Entity tomato = new Entity("Fruits","Tomato");
		tomato.setProperty("Color", "Red");
		
		//Instead of storing each individual entity, Using a List we can store entities of same kind to data store in a single batch 
		
		List<Entity> favfruits = Arrays.asList(apple,mango,banana,tomato); 
		ds.put(favfruits);                                          
		
		//Building an Ancestor path
		Key anc = new KeyFactory.Builder("Fruits", "Mango")
				.addChild("Fruits", "Banana")
				.addChild("Fruits", "Apple")
				.getKey();
		out.println("<br><br> Ancestor key created is " + anc);
		
		//Writing Queries to retrieve the entities. //Kind name is sent as argument in the Query constructor. Specifies that this query acts on that Kind.
		Query fruitquery = new Query("Fruits").addFilter("Color",FilterOperator.EQUAL, "Red"); 
		int counter = 0;
		PreparedQuery pq = ds.prepare(fruitquery);
		for(Entity fruitList:pq.asIterable()) {
	
			if(fruitList.getProperty("Color").toString().equals("Red")) {
				counter ++;
			}
			String color = fruitList.getProperty("Color").toString();
			out.println("<br><br> Fruits and their properties are : Color is " + color );
			
		}
		
		out.println("<br><br> Red got " + counter + "Votes");
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
	}

}
